Public Class clsOrder
    'A comment for this class goes here.
    'this holds the regular order information that is
    'not order detail

    Private sID As String                       'Hold Order ID
    Private sCustomerName As String             'Hold Customer Name
    Private sCustomerPhone As String
    Private sTheDate As String
    Private sCustomerBillStreet As String
    Private sCustomerBillCity As String
    Private sCustomerBillState As String
    Private sCustomerBillZip As String
    Private sCustomerShipStreet As String
    Private sCustomerShipCity As String
    Private sCustomerShipState As String
    Private sCustomerShipZip As String


    Private sCustomerExtraFee As String

    Private detailsList As ArrayList            'Hold the detail line items as an Arraylist
    Private sError As String                    'Hold any errors generated by this class


    Public Sub New()
        'Set our initial values
        sID = ""
        sCustomerName = ""
        sCustomerPhone = ""
        sTheDate = ""
        sCustomerBillStreet = ""
        sCustomerBillCity = ""
        sCustomerBillState = ""
        sCustomerBillZip = ""
        sCustomerShipStreet = ""
        sCustomerShipCity = ""
        sCustomerShipState = ""
        sCustomerShipZip = ""
        sCustomerExtraFee = ""

        sError = ""
        detailsList = New ArrayList
    End Sub

    '===================================================
    ' Object properties set / get
    '===================================================

    Public Property ID()
        'get and set the order id
        Get
            Return sID
        End Get
        Set(ByVal value)

            'Validation at class level
            If isValidID(value) = True Then
                sID = Convert.ToInt32(value)
            End If
        End Set
    End Property

    Public Property CustomerName()
        'Get and set the customer name
        Get
            Return sCustomerName
        End Get
        Set(ByVal value)

            If isValidName(value) Then
                sCustomerName = value
            End If
        End Set
    End Property
    Public Property CustomerPhone()
        ' get/set the customer phone
        Get
            Return sCustomerPhone
        End Get

        Set(ByVal value)
            If isValidPhone(value) Then
                sCustomerPhone = value
            End If
        End Set
    End Property
    Public Property TheDate()
        'set/get the date entered 
        Get
            Return sTheDate
        End Get
        Set(ByVal value)
            If isValidDate(value) Then
                sTheDate = value
            End If
        End Set
    End Property
    Public Property CustomerBillStreet()
        'Get and set the customer billing street
        Get
            Return sCustomerBillStreet
        End Get
        Set(ByVal value)

            If isValidBillStreet(value) Then
                sCustomerBillStreet = value
            End If
        End Set
    End Property
    Public Property CustomerBillCity()
        'Get and set the customer billing city
        Get
            Return sCustomerBillCity
        End Get
        Set(ByVal value)

            If isValidBillCity(value) Then
                sCustomerBillCity = value
            End If
        End Set
    End Property
    Public Property CustomerBillState()
        'Get and set the customer billing city
        Get
            Return sCustomerBillState

        End Get
        Set(ByVal value)

            If isValidBillState(value) Then
                sCustomerBillState = value
            End If
        End Set
    End Property
    Public Property CustomerBillZip()
        'Get and set the customer billing zip
        Get
            Return sCustomerBillZip

        End Get
        Set(ByVal value)

            If isValidBillZip(value) Then
                sCustomerBillZip = value
            End If
        End Set
    End Property
    Public Property CustomerShipStreet()
        'Get and set the customer shipping street
        Get
            Return sCustomerShipStreet
        End Get
        Set(ByVal value)
            'Validation 
            If isValidShipStreet(value) Then
                sCustomerShipStreet = value
            End If
        End Set
    End Property
    Public Property CustomerShipCity()
        'Get and set the customer shipping city
        Get
            Return sCustomerShipCity
        End Get
        Set(ByVal value)

            If isValidShipCity(value) Then
                sCustomerShipCity = value
            End If
        End Set
    End Property

    Public Property CustomerShipState()
        'Get and set the customer shipping state
        Get
            Return sCustomerShipState

        End Get
        Set(ByVal value)

            If isValidShipState(value) Then
                sCustomerShipState = value
            End If
        End Set
    End Property
    Public Property CustomerShipZip()
        'Get and set the customer shipping zip
        Get
            Return sCustomerShipZip

        End Get
        Set(ByVal value)

            If isValidShipZip(value) Then
                sCustomerShipZip = value
            End If
        End Set
    End Property

    Public Property CustomerExtraFee()
        'get and set the shipping fee
        Get
            Return sCustomerExtraFee
        End Get
        Set(ByVal value)

            'Validation at class level
            If isValidCustomerExtraFee(value) = True Then
                sCustomerExtraFee = Convert.ToDouble(value)
            End If
        End Set
    End Property
    '===================================================
    ' Helper routines :O
    '===================================================

    Public Sub AddDetail(ByVal aDetailsList As ArrayList)

        'Loop through all our arraylist of details

        For i As Integer = 0 To aDetailsList.Count - 1
            'get a single order detail line out of 
            'the ArrayList of orders details
            Dim arrItem As String() = aDetailsList(i)
           
            'create a new order detail object
            Dim myOrderDetail As New clsOrderDetail

            'Add detail info to our object
            ' 0 - detail line
            ' 1 - Item Description


            myOrderDetail.line = arrItem(0)
            myOrderDetail.Item = arrItem(1)
            myOrderDetail.Qty = arrItem(2)
            myOrderDetail.Price = arrItem(3)

            If myOrderDetail.getError = "" Then
                myOrderDetail.total()
            End If

            'Add the order to our collection
            'Check for errors in the detail
            'if no errors then add
            If myOrderDetail.getError = "" Then
                detailsList.Add(myOrderDetail)
            Else
                addError(myOrderDetail.getError)
            End If
        Next

        If detailsList.Count = 0 Then
            addError("Detail:Order must contain at least one valid detail line")
        End If
    End Sub

    Public Function getLineTotal(ByVal iLine As Integer) As Decimal

        'return the line total
        'Loop through all the order lines
        For i As Integer = 0 To detailsList.Count - 1

            Dim myOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            If myOrderDetail.line = iLine Then
                Return myOrderDetail.total
            End If
        Next
    End Function

    Public Function getTotal() As Decimal
        'return the total for the order
        Dim aTotal As Decimal
        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aTotal += anOrderDetail.total
        Next

        Return aTotal
    End Function
 
   
    Public Function getTotalTax() As Decimal
        'return the tax rate for the order
        Dim aTotal As Decimal
        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aTotal += anOrderDetail.total
        Next
        aTotal = (aTotal * 0.07825)
        Return aTotal
    End Function
    Public Function getOrderTotal() As Decimal
        'return the order total for the order including shipping
        Dim aTotal As Decimal
        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aTotal += anOrderDetail.total
        Next
        aTotal = (aTotal * 1.07825) + CustomerExtraFee
        Return aTotal
    End Function

    Private Sub addError(ByVal s As String)
        'private function to format our error message by
        'adding line breaks when necessary
        If sError = "" Then
            sError = s
        Else
            sError += vbCrLf & s
        End If
    End Sub

    '===================================================
    ' Public functions to access the detail lines and the error
    '===================================================

    Public Function GetDetail() As ArrayList
        'Retrieve a detail item from the order
        Dim detailItemsList As New ArrayList
        For i As Integer = 0 To detailsList.Count - 1
            Dim orderDetail As New clsOrderDetail
            orderDetail = detailsList.Item(i)

            Dim arrDetail(4) As String

            arrDetail(0) = orderDetail.line
            arrDetail(1) = orderDetail.Item
            arrDetail(2) = orderDetail.Qty
            arrDetail(3) = orderDetail.Price
            arrDetail(4) = orderDetail.total

            detailItemsList.Add(arrDetail)
        Next
        Return detailItemsList
    End Function

    Public Function getError()
        'public Function to return the error To other objects
        Return sError
    End Function

    '============Validation routines===================

    Private Function isValidID(ByVal s As String) As Boolean
        'checks to see if id is valid
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("ID: Cannot be left blank")
                bResult = False
                Exit Function
            End If
            If s >= 100 Then
                bResult = True
            Else
                addError("id: cannot be less than 100")
                bResult = False
                Exit Function
            End If
            If s Mod 100 <> 0 Then
                addError("id: must be in increments of 100")
                bResult = False
            End If
        Catch ex As Exception
            addError("ID: Invalid ID (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidName(ByVal s As String) As Boolean
        Dim bResult As Boolean
        'checks to see if name is present
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Name: Invalid Customer Name")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid Customer Name (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidPhone(ByVal s As String) As Boolean
        Dim bResult As Boolean
        ' checks to see if phone is present and if its length is at least
        ' 10 digits long
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Phone: Invalid phone number")
                bResult = False
                Exit Function
            End If
            If Len(s) < 10 Then
                addError("phone: phone must be 10 digits long")
                bResult = False
            End If
        Catch ex As Exception
            addError("Phone: Invalid phone number (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidDate(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            'checks to see if date is present and is in date format
            If s <> "" Then
                bResult = True
            Else
                addError("Name: Invalid Date ")
                bResult = False
                Exit Function
            End If
            If IsDate(s) = False Then
                addError("invalid date: mm/dd/yyyy")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid Date (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidBillStreet(ByVal s As String) As Boolean
        Dim bResult As Boolean
        'checks to see if street is present
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Bill Street: Invalid bill street")
                bResult = False
            End If
        Catch ex As Exception
            addError("bill street Invalid bill street (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidBillCity(ByVal s As String) As Boolean
        'checks to see if city is present
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Bill city: Invalid bill city name")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid bill city (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidBillState(ByVal s As String) As Boolean
        'checks to see if state is present
        ' also checks if the length is less than 2 or greater than 3
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Bill State: Bill State is blank")
                bResult = False
                Exit Function
            End If
            If Len(s) < 2 Then
                addError("billing State can not be less than two letters")
                bResult = False
                Exit Function
            End If
            If Len(s) > 3 Then
                addError("please abbreviate billing states up to 3 letters")
                bResult = False

            End If
        Catch ex As Exception
            addError("Name: Invalid bill state (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidBillZip(ByVal s As String) As Boolean
        Dim bResult As Boolean
        'checks to see if zipcode is present
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Bill Zip: Bill zip is blank")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid bill State (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidShipStreet(ByVal s As String) As Boolean
        'check if shipping street is present
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Ship Street: ship street is blank")
                bResult = False
            End If
        Catch ex As Exception
            addError("Ship street Invalid Ship street Name (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidShipCity(ByVal s As String) As Boolean
        'checks if shipping city is present
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Ship city: ship city is blank")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid Ship city (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidShipState(ByVal s As String) As Boolean
        'checks to see if ship state is present and if <2 and>3 letters
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("ship State: ship State is blank")
                bResult = False
                Exit Function
            End If
            If Len(s) < 2 Then
                addError("Shipping State: state abbreviatations must be at least 2 letters ")
                bResult = False
                Exit Function
            End If
            If Len(s) > 3 Then
                addError("Shipping State: please abbreviate states to 3 letters: ontario, Candada = Ont, california = CA ")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid shipping city (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
    Private Function isValidShipZip(ByVal s As String) As Boolean
        'checks to see if shipping zip is present
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Ship Zip: Ship zip is blank")
                bResult = False
            End If
        Catch ex As Exception
            addError("Ship zip: Invalid ship zip (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function


    Private Function isValidCustomerExtraFee(ByVal s As String) As Boolean
        'checks to see if shipping fee/option is present

        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Delivery Option: please select delivery option")
                bResult = False
            End If            
        Catch ex As Exception
            addError("Invalid DeliveryCharge:  (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function


End Class
